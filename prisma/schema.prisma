// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
//npx prisma migrate dev --name init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  role      String
  name  String
  email     String  @unique
  password  String?
  image String?
  documents Document[] @relation("CreatedDocuments")
  createdMeetings Meeting[]  @relation("CreatedMeetings")
  userNotifications Notification[] @relation("UserNotifications")
  sharedFiles FileShare[] @relation("SharedFiles")
  receivedFiles FileShare[] @relation("SharedWith")
}

model Document {
  id          Int      @id @default(autoincrement())
  googleId    String   @unique
  createdBy   User     @relation("CreatedDocuments", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  sharedWith  FileShare[]  @relation("SharedDocuments")
}

model FileShare {
  id          Int       @id @default(autoincrement())
  document    Document  @relation("SharedDocuments", fields: [documentId], references: [googleId], onDelete: Cascade)
  documentId  String
  owner       User      @relation("SharedFiles", fields: [userOwnerId], references: [id], onDelete: Cascade)
  userOwnerId Int
  sharedWith  User      @relation("SharedWith", fields: [userEmail], references: [email], onDelete: Cascade)
  userEmail   String
}

model Meeting {
  id            Int       @id @default(autoincrement())
  title         String
  description   String?
  date          DateTime
  roomName      String     @unique
  invitedEmails String[] 
  createdBy     User       @relation("CreatedMeetings", fields: [createdById], references: [id], onDelete: Cascade)
  createdById   Int
  reminderSent   Boolean    @default(false)
  meetingNotification Notification[] @relation("MeetingNotification")
}

model Notification {
  id          Int      @id @default(autoincrement())
  user        User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  meeting     Meeting? @relation("MeetingNotification", fields: [meetingId], references: [id], onDelete: Cascade)
  meetingId   Int?
  message     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
}